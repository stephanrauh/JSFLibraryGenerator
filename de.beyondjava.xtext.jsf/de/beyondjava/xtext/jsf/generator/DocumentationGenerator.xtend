/*
 * generated by XItext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Attribute
import de.beyondjava.xtext.jsf.componentLanguage.Component
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DocumentationGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(Component)) {
			fsa.generateFile("net/bootsfaces/component/" + e.name.toFirstLower + "/" + e.name.toFirstUpper +
				".xhtml", e.compile)
		}
	}

	def compile(Component widget) '''
<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://bootsfaces.net/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets">

	<ui:define name="content">
		<style>
td {
	padding: 8px;
}
</style>
		<h1>«widget.name.toFirstUpper» (&lt;b:«widget.name.toFirstLower» /&gt;)</h1>

		<p>Describe in a few words what <code>&lt;b:«widget.name.toFirstLower»&gt;</code> is about.</p>
		<h1>Basic usage</h1>
		<p>Put a short description in simple words here.</p>
		<b:panel look="info">
			<f:facet name="heading">
				<b>Attributes of &lt;b:«widget.name.toFirstLower» &gt;</b>
			</f:facet>
			<div class="table-responsive">
				<table class="table table-striped table-hover"
					style="background-color: #fff">
					<thead>
						<tr>
							<th>Attribute</th>
							<th>Default value</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						«FOR f : widget.attributes»
						  «f.generateAttribute»
						«ENDFOR»
					</tbody>
				</table>
			</div>
		</b:panel>
		<b:panel look="info">
			<f:facet name="heading">
				<b>Skinning</b>
			</f:facet>
			<ul>
				<li>Tell the world which CSS classes can be used to change the
					look of the component.</li>
			</ul>
		</b:panel>

		<script type="text/javascript">
      		SyntaxHighlighter.all();
    	</script>
		<br />
		<br />
		<br />
		<br />
	</ui:define>
</ui:composition>
	'''

	def generateAttribute(Attribute a) '''
		<tr>
		    <td>«a.name»</td>
		    <td>«IF a.defaultValue!=null» «a.defaultValue» «ELSEIF a.type=="Boolean"»false«ELSEIF a.type=="Integer"»0 «ELSE»(none)«ENDIF»</td>
		    <td>«IF a.desc != null»«a.desc.replace("\\\"", "\"")»«ENDIF»</td>
		</tr>
	'''
	
}