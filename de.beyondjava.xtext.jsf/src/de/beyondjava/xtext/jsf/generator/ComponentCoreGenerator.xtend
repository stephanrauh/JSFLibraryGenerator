/*
 * generated by Xtext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Attribute
import de.beyondjava.xtext.jsf.componentLanguage.AttributeList
import de.beyondjava.xtext.jsf.componentLanguage.Component
import de.beyondjava.xtext.jsf.formatting.JavaFormatter
import java.util.ArrayList
import java.util.Collections
import java.util.Comparator
import java.util.HashMap
import java.util.List
import java.util.Map
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ComponentCoreGenerator implements IGenerator {

	def collectAttributeLists(Resource resource) {
		var attributeLists = new HashMap()
		for (e : resource.allContents.toIterable.filter(AttributeList)) {
			attributeLists.put(e.name, e.attributes)
		}
		return attributeLists
	}

	def allAttributes(Component widget, Map<String, EList<Attribute>> lists) {
		var attributes = new ArrayList<Attribute>();
		for (e : widget.attributes) {
			attributes.add(e);
		}
		for (e : widget.attributeLists) {
			var list = lists.get(e)
			for (a:list) {
				attributes.add(a)
			}
		}
		Collections.sort(attributes, new Comparator<Attribute>(){
			override compare(Attribute o1, Attribute o2) {
				return o1.name.compareTo(o2.name)
			}

		})
		return attributes;
	}

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var attributeLists = collectAttributeLists(resource)
		for (e : resource.allContents.toIterable.filter(Component)) {

			val platformString = resource.URI.toPlatformString(true);
			val myFile = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString));
			val project = myFile.getProject();
			var generated = e.compile(attributeLists)
			var formatted = JavaFormatter.format(generated.toString, project);

			fsa.generateFile("net/bootsfaces/component/" + e.name.toFirstLower + "/" + e.name.toFirstUpper +
				"Core.java", formatted)
		}
	}

	def compile(Component e, HashMap<String, EList<Attribute>> attributeLists) '''
		«e.generateCopyrightHeader»
		package net.bootsfaces.component.«e.name.toFirstLower»;

		import javax.faces.component.*;
		«IF e.hasTooltip!=null»
			import net.bootsfaces.render.Tooltip;
		«ENDIF»
		import net.bootsfaces.utils.BsfUtils;


		/** This class holds the attributes of &lt;b:«e.name» /&gt;. */
		public abstract class «e.name.toFirstUpper»Core extends «parentClass(e)» «IF e.hasTooltip!=null» implements net.bootsfaces.render.IHasTooltip «ENDIF» {

		«e.generateProperties(attributeLists)»

		  «FOR f : e.allAttributes(attributeLists)»
		  	«IF f.inherited==null»
		  		«f.generateAccessors»
		  	«ENDIF»
		  «ENDFOR»
		}

	'''

	def parentClass(Component component) {
		if (component.extends != null) {
			return component.extends;
		}
		if (component.processesInput != null) {
			return "UIInput";
		}
		return "UIOutput";
	}

	def generateAccessors(
		Attribute e) '''

		/**
		 * «e.desc» <P>
		 * @return Returns the value of the attribute, or «e.getDefaultValueForDocumentation», if it hasn't been set by the JSF file.
		 */
		public «e.attributeType» «e.getter» {
			return «optionalTypeCast(e)» («realType(e.objectType)»)getStateHelper().eval(«e.name.propertyKey.validIdentifier»«e.defaultValueTerm»);
		}

		/**
		 * «e.desc» <P>
		 * Usually this method is called internally by the JSF engine.
		 */
		public void set«e.name.toCamelCase.toFirstUpper»(«e.attributeType» _«e.name.toCamelCase») {
		    getStateHelper().put(«e.name.propertyKey.validIdentifier», _«e.name.toCamelCase»);
		}

	'''

	def validIdentifier(String s) {
		if ("for".equals(s)) {
			return "_for";
		}
		return s;
	}

	def getPropertyKey(String s) {
		if (s.propertyKeyValue.startsWith("\"")) {
			return s.propertyKeyValue;
		} else {
			return "PropertyKeys." + s.propertyKeyValue.validIdentifier;
		}

	}

	def getPropertyKeyValue(String s) {
		if (s == "static") {
			return "\"" + s + "\"";
		} else {
			return s.toCamelCase;
		}
	}

	def getDefaultValueTerm(Attribute a) {
		if (a.defaultValue != null && a.type == null)
			', "' + a.defaultValue + '"'
		else if (a.defaultValue != null && a.type == "String")
			', "' + a.defaultValue + '"'
		else if (a.defaultValue != null)
			', ' + a.defaultValue
		else if ("Integer".equals(a.type))
			', 0'
		else if ("Float".equals(a.type))
			', 0.0d'
		else if("Boolean".equals(a.type)) ', false' else ''
	}
	
	def getDefaultValueForDocumentation(Attribute a) {
		if (a.defaultValue != null && a.type == null)
			'"' + a.defaultValue + '"'
		else if (a.defaultValue != null && a.type == "String")
			'"' + a.defaultValue + '"'
		else if (a.defaultValue != null)
			a.defaultValue
		else if ("Integer".equals(a.type))
			'0'
		else if ("Float".equals(a.type))
			'0.0d'
		else if("Boolean".equals(a.type)) ', false' else 'null'
	}

	def optionalTypeCast(Attribute e) {
		if(e.objectType != e.attributeType) '(' + e.attributeType + ')' else ''
	}

	def realType(String e) {
		if("Float" == e) return "Double";
		return e;
	}

	def getGetter(Attribute f) {
		if ("Boolean".equals(f.type)) {
			'''is«f.name.toCamelCase.toFirstUpper»()'''
		} else {
			'''get«f.name.toCamelCase.toFirstUpper»()'''
		}
	}

	def getObjectType(Attribute a) {
		if(null == a.type) "String" else a.type;
	}

	def getAttributeType(Attribute a) {
		if (null == a.type)
			"String"
		else if ("Boolean".equals(a.type))
			"boolean"
		else if("Integer".equals(a.type)) "int"
		else if("Float".equals(a.type)) "double" else a.type;
	}

	def generateCopyrightHeader(Component e) '''
/**
 *  Copyright 2014-16 by Riccardo Massera (TheCoder4.Eu) and Stephan Rauh (http://www.beyondjava.net).
 *
 *  This file is part of BootsFaces.
 *
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

	 	'''

	def List<Attribute> notInherited(List<Attribute> elements) {
		val result = newArrayList()
		elements.forEach [ a |
			if ((a.inherited == null) && (!a.name.propertyKeyValue.startsWith("\""))) {
				result.add(a)
			}
		]
		result
	}

	def generateProperties(Component e, HashMap<String, EList<Attribute>> attributeLists) '''
		    protected enum PropertyKeys {
		«FOR f : e.allAttributes(attributeLists).notInherited SEPARATOR ',' AFTER ';'»
			«"		"»«f.name.propertyKeyValue.validIdentifier»
		«ENDFOR»

		        String toString;

		        PropertyKeys(String toString) {
		    this.toString = toString;
		        }

		        PropertyKeys() {}

		        public String toString() {
		    return ((this.toString != null) ? this.toString : super.toString());
		        }
		    }
	'''

	def toCamelCase(String s) {
		var pos = 0 as int
		var cc = s
		while (cc.contains('-')) {
			pos = cc.indexOf('-');
			cc = cc.substring(0, pos) + cc.substring(pos + 1, pos + 2).toUpperCase() + cc.substring(pos + 2);
		}
		return cc
	}

}
