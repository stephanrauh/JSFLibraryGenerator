/*
 * generated by XItext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Attribute
import de.beyondjava.xtext.jsf.componentLanguage.AttributeList
import de.beyondjava.xtext.jsf.componentLanguage.Component
import java.util.ArrayList
import java.util.Collections
import java.util.Comparator
import java.util.HashMap
import java.util.Map
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class UITestGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(Component)) {
			var attributeLists = collectAttributeLists(resource)
			var content = e.compile(attributeLists)
			var eclipseFileName = "net/bootsfaces/component/" + e.name.toFirstLower + "/" + e.name.toFirstUpper +
				"Test.java"
			fsa.generateFile(eclipseFileName, content)
		}
	}

	def compile(Component widget, HashMap<String, EList<Attribute>> attributeLists) '''
		package net.bootsfaces.healthcheck.«widget.name.toFirstLower»;

		import java.io.IOException;

		import javax.faces.context.FacesContext;
		import javax.faces.context.ResponseWriter;
		import javax.faces.bean.ManagedBean;

		import net.bootsfaces.healthcheck.StringResponseWriter;
		import net.bootsfaces.healthcheck.UITest;
		import net.bootsfaces.component.«widget.name.toFirstLower».«widget.name.toFirstUpper»;
		import net.bootsfaces.component.«widget.name.toFirstLower».«widget.name.toFirstUpper»Renderer;

		@ManagedBean
		public class «widget.name.toFirstUpper»Test extends UITest {
			public void test1(FacesContext context) throws IOException {
				«widget.name.toFirstUpper» component = new «widget.name.toFirstUpper»();
				«FOR f : widget.allAttributes(attributeLists)»
					«f.generateAttribute»
				«ENDFOR»
				new «widget.name.toFirstUpper»Renderer().encodeBegin(context, component);
				new «widget.name.toFirstUpper»Renderer().encodeChildren(context, component);
				new «widget.name.toFirstUpper»Renderer().encodeEnd(context, component);
			}
			public void test2(FacesContext context) throws IOException {
				«widget.name.toFirstUpper» component = new «widget.name.toFirstUpper»();
				«FOR f : widget.allAttributes(attributeLists)»
					«if ("true".equals(f.required)) {
						f.generateAttribute
					}»
				«ENDFOR»
				new «widget.name.toFirstUpper»Renderer().encodeBegin(context, component);
				new «widget.name.toFirstUpper»Renderer().encodeChildren(context, component);
				new «widget.name.toFirstUpper»Renderer().encodeEnd(context, component);
			}
			public void test3(FacesContext context) throws IOException {
				// add your own implementation
			}
			public void test4(FacesContext context) throws IOException {
				// add your own implementation
			}
			public void test5(FacesContext context) throws IOException {
				// add your own implementation
			}
		}
	'''

	def generateAttribute(Attribute a) {
		if (a.dummyValue != null) {
			return "component.set" + a.name.toFirstUpper.toCamelCase + "(" + a.dummyValue + ");";
		}
	}

	def toCamelCase(String s) {
		var pos = 0 as int
		var cc = s
		while (cc.contains('-')) {
			pos = cc.indexOf('-');
			cc = cc.substring(0, pos) + cc.substring(pos + 1, pos + 2).toUpperCase() + cc.substring(pos + 2);
		}
		return cc
	}

	def dummyValue(Attribute a) {
		if (a.type == "String") {
			return '"' + a.name + '"';
		}
		if (a.type == "Boolean") {
			return "true";
		}
		if (a.type == "Integer") {
			return a.name.length;
		}
		return null;
	}

	def collectAttributeLists(Resource resource) {
		var attributeLists = new HashMap()
		for (e : resource.allContents.toIterable.filter(AttributeList)) {
			attributeLists.put(e.name, e.attributes)
		}
		return attributeLists
	}

	def allAttributes(Component widget, Map<String, EList<Attribute>> lists) {
		var attributes = new ArrayList<Attribute>();
		for (e : widget.attributes) {
			attributes.add(e);
		}
		for (e : widget.attributeLists) {
			var list = lists.get(e)
			for (a : list) {
				attributes.add(a)
			}
		}
		Collections.sort(attributes, new Comparator<Attribute>() {
			override compare(Attribute o1, Attribute o2) {
				return o1.name.compareTo(o2.name)
			}

		})
		return attributes;
	}
}
