/*

 * generated by Xtext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Component
import de.beyondjava.xtext.jsf.formatting.JavaFormatter
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ComponentListGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val platformString = resource.URI.toPlatformString(true);
		var content = resource.compile();
		val myFile = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString));
		val project = myFile.getProject();
		var formatted = JavaFormatter.format(content.toString, project);

		fsa.generateFile("../src/main/java/net/bootsfaces/component/ComponentsEnum.java", formatted);
	}

	def compile(Resource resource) '''
		/**
		 *  Copyright 2014 - 17 by Riccardo Massera (TheCoder4.Eu) and Stephan Rauh (http://www.beyondjava.net).
		 *
		 *  This file is part of BootsFaces.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *    http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		package net.bootsfaces.component;

		public enum ComponentsEnum {
			«FOR e : resource.allContents.toIterable.filter(Component) SEPARATOR ","»
				«e.compile»
			«ENDFOR»
			;
			private String tag;

		    private String tagname;

		    private String classname;

		    ComponentsEnum(String tag, String tagname, String classname) {
		      this.tag = tag;
		      this.tagname = tagname;
		      this.classname = classname;
		    }

		    public String tag() {
		      return tag;
		    }

		    public String tagname() {
			  return tagname;
			}

			public String classname() {
				return classname;
			}
		}
	'''

	def compile(Component widget) {
		var lower = widget.name.toFirstLower;
		var name = lower;
		if (lower.equals("switch")) {
			name = "switchComponent";
		}
		var classname = "net.bootsfaces.component." + lower + "." + widget.name.toFirstUpper;
		var line = name + "(\"<b:" + lower + "\", \"" + lower + "\", \"" + classname + "\")";
		return line;
	}
}
