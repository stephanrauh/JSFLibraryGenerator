/*
 * generated by Xtext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Attribute
import de.beyondjava.xtext.jsf.componentLanguage.AttributeList
import de.beyondjava.xtext.jsf.componentLanguage.Component
import java.util.ArrayList
import java.util.Collections
import java.util.Comparator
import java.util.HashMap
import java.util.Map
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TaglibGenerator implements IGenerator {

	def collectAttributeLists(Resource resource) {
		var attributeLists = new HashMap()
		for (e : resource.allContents.toIterable.filter(AttributeList)) {
			attributeLists.put(e.name, e.attributes)
		}
		return attributeLists
	}

	def allAttributes(Component widget, Map<String, EList<Attribute>> lists) {
		var attributes = new ArrayList<Attribute>();
		for (e : widget.attributes) {
			attributes.add(e);
		}
		for (e : widget.attributeLists) {
			var list = lists.get(e)
			for (a:list) {
				attributes.add(a)
			}
		}
		Collections.sort(attributes, new Comparator<Attribute>(){
			override compare(Attribute o1, Attribute o2) {
				return o1.name.compareTo(o2.name)
			}

		})
		return attributes;
	}

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var attributeLists = collectAttributeLists(resource)
		fsa.generateFile("../src/main/meta/META-INF/bootsfaces-b.taglib.xml", resource.compile(attributeLists));
	}

	def compile(Resource resource, HashMap<String, EList<Attribute>> attributeLists) '''
	<?xml version="1.0" encoding="UTF-8"?>
	<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
		version="2.0">
		<namespace>http://bootsfaces.net/ui</namespace>
		«FOR e : resource.allContents.toIterable.filter(Component)»
		  «e.compile(attributeLists)»
	    «ENDFOR»
		</facelet-taglib>
		'''

	def compile(Component widget, HashMap<String, EList<Attribute>> attributeLists) '''

  <!-- *********** b:«widget.name.toFirstLower» ************************* -->
  <tag>
  	<tag-name>«widget.name.toFirstLower»</tag-name>
  	<component>
  		<component-type>net.bootsfaces.component.«widget.name.toFirstLower».«widget.name.toFirstUpper»</component-type>
  	</component>
	«FOR f : widget.allAttributes(attributeLists)»
	«f.generateAttribute»
	«ENDFOR»
  </tag>
	'''

	def generateAttribute(Attribute a) '''
		<attribute>
		  «IF a.desc != null»<description><![CDATA[«a.desc.replace("\\\"", "\"")»]]></description>«ENDIF»
		  <name>«a.name»</name>
		  <required>«a.requiredToBoolean»</required>
		  <type>«a.generateAttributeType»</type>
		</attribute>
		«IF a.name.contains("-")»
			<attribute>
			  «IF a.desc != null»<description><![CDATA[«a.desc.replace("\\\"", "\"")»]]></description>«ENDIF»
			  <name>«a.name.toCamelCase»</name>
			  <required>«a.requiredToBoolean»</required>
			  <type>«a.generateAttributeType»</type>
			</attribute>
		«ENDIF»
	'''

	def toCamelCase(String s) {
		var pos = 0 as int
		var cc = s
		while (cc.contains('-')) {
			pos = cc.indexOf('-');
			cc = cc.substring(0, pos) + cc.substring(pos+1, pos+2).toUpperCase() + cc.substring(pos+2);
		}
		return cc
	}

	def requiredToBoolean(Attribute a) {
		if (a.required==null) return "false"
		else return "true"
	}

	def generateAttributeType(Attribute a) {
		'''«IF a.type == null»java.lang.String«
		ELSEIF a.type == 'Boolean'»java.lang.Boolean«
		ELSEIF a.type == 'Integer'»java.lang.Integer«
		ELSEIF a.type == 'Float'»java.lang.Double«
		ELSEIF a.type.startsWith("Map<")»java.util.Map«
		ELSE»«a.type»«ENDIF»'''
	}

}