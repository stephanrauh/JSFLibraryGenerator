/*
 * generated by Xtext
 */
grammar InternalComponentLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.beyondjava.xtext.jsf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.beyondjava.xtext.jsf.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.beyondjava.xtext.jsf.services.ComponentLanguageGrammarAccess;

}

@parser::members {

 	private ComponentLanguageGrammarAccess grammarAccess;
 	
    public InternalComponentLanguageParser(TokenStream input, ComponentLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";	
   	}
   	
   	@Override
   	protected ComponentLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	 iv_ruleDomainmodel=ruleDomainmodel 
	 { $current=$iv_ruleDomainmodel.current; } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsComponentParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainmodelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='widget' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getWidgetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='implemented_by ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getImplemented_byKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getImplementedByQualifiedNameParserRuleCall_2_1_0()); 
	    }
		lv_implementedBy_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"implementedBy",
        		lv_implementedBy_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='rendered_by ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComponentAccess().getRendered_byKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getRenderedByQualifiedNameParserRuleCall_3_1_0()); 
	    }
		lv_renderedBy_5_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"renderedBy",
        		lv_renderedBy_5_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		lv_processesInput_6_0=	'processes_input' 
    {
        newLeafNode(lv_processesInput_6_0, grammarAccess.getComponentAccess().getProcessesInputProcesses_inputKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed($current, "processesInput", lv_processesInput_6_0, "processes_input");
	    }

)
)?(	otherlv_7='extends' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getComponentAccess().getExtendsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getExtendsQualifiedNameParserRuleCall_5_1_0()); 
	    }
		lv_extends_8_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"extends",
        		lv_extends_8_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		lv_hasChildren_9_0=	'has_children' 
    {
        newLeafNode(lv_hasChildren_9_0, grammarAccess.getComponentAccess().getHasChildrenHas_childrenKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed($current, "hasChildren", lv_hasChildren_9_0, "has_children");
	    }

)
)?(
(
		lv_hasTooltip_10_0=	'has_tooltip' 
    {
        newLeafNode(lv_hasTooltip_10_0, grammarAccess.getComponentAccess().getHasTooltipHas_tooltipKeyword_7_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed($current, "hasTooltip", lv_hasTooltip_10_0, "has_tooltip");
	    }

)
)?(	otherlv_11='description' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getComponentAccess().getDescriptionKeyword_8_0());
    }
(
(
		lv_description_12_0=RULE_STRING
		{
			newLeafNode(lv_description_12_0, grammarAccess.getComponentAccess().getDescriptionSTRINGTerminalRuleCall_8_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_12_0, 
        		"STRING");
	    }

)
))?	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getAttributesAttributeParserRuleCall_10_0()); 
	    }
		lv_attributes_14_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_14_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getTypeAttributetypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleAttributetype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Attributetype");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='default' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getDefaultKeyword_2_0());
    }
(
(
		lv_defaultValue_3_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_3_0, grammarAccess.getAttributeAccess().getDefaultValueSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_3_0, 
        		"STRING");
	    }

)
))?(
(
		lv_required_4_0=	'mandatory' 
    {
        newLeafNode(lv_required_4_0, grammarAccess.getAttributeAccess().getRequiredMandatoryKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "required", lv_required_4_0, "mandatory");
	    }

)
)?(
(
		lv_inherited_5_0=	'inherited' 
    {
        newLeafNode(lv_inherited_5_0, grammarAccess.getAttributeAccess().getInheritedInheritedKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "inherited", lv_inherited_5_0, "inherited");
	    }

)
)?(
(
		lv_desc_6_0=RULE_STRING
		{
			newLeafNode(lv_desc_6_0, grammarAccess.getAttributeAccess().getDescSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"desc",
        		lv_desc_6_0, 
        		"STRING");
	    }

)
)?)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleAttributetype
entryRuleAttributetype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributetypeRule()); } 
	 iv_ruleAttributetype=ruleAttributetype 
	 { $current=$iv_ruleAttributetype.current.getText(); }  
	 EOF 
;

// Rule Attributetype
ruleAttributetype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getStringKeyword_0()); 
    }

    |
	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getBooleanKeyword_1()); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getIntegerKeyword_2()); 
    }

    |
	kw='javax.el.MethodExpression' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getJavaxElMethodExpressionKeyword_3()); 
    }

    |
	kw='javax.faces.event.ActionListener' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getJavaxFacesEventActionListenerKeyword_4()); 
    }

    |
	kw='javax.faces.component.UIComponent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getJavaxFacesComponentUIComponentKeyword_5()); 
    }

    |
	kw='javax.faces.event.ValueChangeListener' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getJavaxFacesEventValueChangeListenerKeyword_6()); 
    }

    |
	kw='java.faces.convert.Converter' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getJavaFacesConvertConverterKeyword_7()); 
    }

    |
	kw='javax.faces.validator.Validator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributetypeAccess().getJavaxFacesValidatorValidatorKeyword_8()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


