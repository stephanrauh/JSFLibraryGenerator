<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://bootsfaces.net/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets">

	<ui:define name="content">
		<style>
td {
	padding: 8px;
}
</style>
		<h1>SelectBooleanCheckbox (&lt;b:selectBooleanCheckbox /&gt;)</h1>

		<p>Describe in a few words what <code>&lt;b:selectBooleanCheckbox&gt;</code> is about.</p>
		<h1>Basic usage</h1>
		<p>Put a short description in simple words here.</p>
		<b:panel look="info">
			<f:facet name="heading">
				<b>Attributes of &lt;b:selectBooleanCheckbox &gt;</b>
			</f:facet>
			<table class="table table-striped table-hover"
				style="background-color: #fff">
				<thead>
					<tr>
						<th>Attribute</th>
						<th>Default value</th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
					    <td>accesskey</td>
					    <td>(none)</td>
					    <td>Access key to transfer focus to the input element.</td>
					</tr>
					<tr>
					    <td>alt</td>
					    <td>(none)</td>
					    <td>Alternate textual description of the input element.</td>
					</tr>
					<tr>
					    <td>binding</td>
					    <td>(none)</td>
					    <td>An el expression referring to a server side UIComponent instance in a backing bean.</td>
					</tr>
					<tr>
					    <td>caption</td>
					    <td>(none)</td>
					    <td>Caption of the check box (text behind the check box, as opposed to the label, which may be above the check box)</td>
					</tr>
					<tr>
					    <td>converter</td>
					    <td>(none)</td>
					    <td>An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. In case it's a static text, it must refer to a converter id.</td>
					</tr>
					<tr>
					    <td>converterMessage</td>
					    <td>(none)</td>
					    <td>Message to display when conversion fails.</td>
					</tr>
					<tr>
					    <td>dir</td>
					    <td>(none)</td>
					    <td>Direction indication for text that does not inherit directionality.</td>
					</tr>
					<tr>
					    <td>disabled</td>
					    <td>false</td>
					    <td>Disables the input element, default is false.</td>
					</tr>
					<tr>
					    <td>fieldSize</td>
					    <td>(none)</td>
					    <td>The size of the input. Possible values are xs (extra small), sm (small), md (medium) and lg (large) .</td>
					</tr>
					<tr>
					    <td>id</td>
					    <td>(none)</td>
					    <td>Unique identifier of the component in a namingContainer.</td>
					</tr>
					<tr>
					    <td>immediate</td>
					    <td>false</td>
					    <td>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase. Default is false.</td>
					</tr>
					<tr>
					    <td>label</td>
					    <td>(none)</td>
					    <td>The label above of the field .</td>
					</tr>
					<tr>
					    <td>lang</td>
					    <td>(none)</td>
					    <td>A localized user presentable name.</td>
					</tr>
					<tr>
					    <td>onblur</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when input element loses focus.</td>
					</tr>
					<tr>
					    <td>onchange</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when input element loses focus and its value has been modified since gaining focus.</td>
					</tr>
					<tr>
					    <td>onclick</td>
					    <td>(none)</td>
					    <td>OnClick DHTML event .</td>
					</tr>
					<tr>
					    <td>ondblclick</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when input element is double clicked.</td>
					</tr>
					<tr>
					    <td>onfocus</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when input element receives focus.</td>
					</tr>
					<tr>
					    <td>onkeydown</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a key is pressed down over input element.</td>
					</tr>
					<tr>
					    <td>onkeypress</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a key is pressed and released over input element.</td>
					</tr>
					<tr>
					    <td>onkeyup</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a key is released over input element.</td>
					</tr>
					<tr>
					    <td>onmousedown</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a pointer input element is pressed down over input element.</td>
					</tr>
					<tr>
					    <td>onmousemove</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a pointer input element is moved within input element.</td>
					</tr>
					<tr>
					    <td>onmouseout</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a pointer input element is moved away from input element.</td>
					</tr>
					<tr>
					    <td>onmouseover</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a pointer input element is moved onto input element.</td>
					</tr>
					<tr>
					    <td>onmouseup</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when a pointer input element is released over input element.</td>
					</tr>
					<tr>
					    <td>onselect</td>
					    <td>(none)</td>
					    <td>Client side callback to execute when text within input element is selected by user.</td>
					</tr>
					<tr>
					    <td>readonly</td>
					    <td>false</td>
					    <td>Flag indicating that this input element will prevent changes by the user.</td>
					</tr>
					<tr>
					    <td>renderLabel</td>
					    <td> true </td>
					    <td>Allows you to suppress automatic rendering of labels. Used by AngularFaces, too.</td>
					</tr>
					<tr>
					    <td>rendered</td>
					    <td>false</td>
					    <td>Boolean value to specify the rendering of the component, when set to false component will not be rendered.</td>
					</tr>
					<tr>
					    <td>span</td>
					    <td>0 </td>
					    <td>The size of the input specified as number of grid columns.</td>
					</tr>
					<tr>
					    <td>style</td>
					    <td>(none)</td>
					    <td>Inline style of the input element.</td>
					</tr>
					<tr>
					    <td>styleClass</td>
					    <td>(none)</td>
					    <td>Style class of the input element.</td>
					</tr>
					<tr>
					    <td>tabindex</td>
					    <td>(none)</td>
					    <td>Advisory tooltip information.</td>
					</tr>
					<tr>
					    <td>title</td>
					    <td>(none)</td>
					    <td>Advisory tooltip information.</td>
					</tr>
					<tr>
					    <td>tooltip</td>
					    <td>(none)</td>
					    <td>The text of the tooltip.</td>
					</tr>
					<tr>
					    <td>tooltipDelay</td>
					    <td>0 </td>
					    <td>The tooltip is shown and hidden with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
					</tr>
					<tr>
					    <td>tooltipDelayHide</td>
					    <td>0 </td>
					    <td>The tooltip is hidden with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
					</tr>
					<tr>
					    <td>tooltipDelayShow</td>
					    <td>0 </td>
					    <td>The tooltip is shown with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
					</tr>
					<tr>
					    <td>tooltipPosition</td>
					    <td>(none)</td>
					    <td>Where is the tooltip to be displayed? Possible values: "top", "bottom", "right", "left", "auto", "auto top", "auto bottom", "auto right" and "auto left". Default to "bottom".</td>
					</tr>
					<tr>
					    <td>value</td>
					    <td>(none)</td>
					    <td>EL expression referring to the back-end bean attribute providing the value of the field.</td>
					</tr>
					<tr>
					    <td>valueChangeListener</td>
					    <td>(none)</td>
					    <td>A method binding expression referring to a method for handling a valuchangeevent.</td>
					</tr>
				</tbody>
			</table>
		</b:panel>
		<b:panel look="info">
			<f:facet name="heading">
				<b>Skinning</b>
			</f:facet>
			<ul>
				<li>Tell the world which CSS classes can be used to change the
					look of the component.</li>
			</ul>
		</b:panel>

		<script type="text/javascript">
      		SyntaxHighlighter.all();
    	</script>
		<br />
		<br />
		<br />
		<br />
	</ui:define>
</ui:composition>
